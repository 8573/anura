{
	shader: "lighted_color_shader",
	model: "humanoid.cfg",

	properties: {
		_mytest: 5,
		mydetails: "def() ->[decimal] [x,y,z]",

		_target_translation: { type: "[decimal,decimal,decimal]|null", },

		_current_movement_path: { type: "[Vec3]", default: [] },

		_movement_cost_fn: "def(Vec3 a,Vec3 b) -> decimal|null
			if(abs(a[1]-b[1]) < 2, 1.0, null)
		",		
	
		_dg: { variable: true, type: "directed_graph", dynamic_initialization: true },
		_wdg: { variable: true, type: "weighted_directed_graph", dynamic_initialization: true },
		find_moves: "def(Vec3 pos, decimal moves) -> [Vec3] [Vec3] <- path_cost_search(_wdg, pos, moves)",
		
		// game logic space position.
		_position: { type: "Vec3" },
		
		_select_box: { variable:true, type: "wireframe_box_primitive", dynamic_initialization: true },
		
		_search_cost: "decimal<- 2.5",
		
		_pt_to_logical: "def(ModelPoint pt) -> Vec3 zip(pt,world.logical.scale,int(a/b))",
		_pt_to_model: "def(Vec3 pt) -> ModelPoint zip(pt,world.logical.scale,a*b)",
		
		_highlight_moveable_locations: "def(Vec3 pos) -> commands [
			set(world.draw_primitive, [_select_box] + map(moves, draw_primitive({
				type: 'box',
				translation: _pt_to_model([value[0],value[1]-1,value[2]]),
				points: [[0,0,0],[3,1,3]],
				color: [255,192,0,255],
				scale: [0.9,1.03,0.9]				
			}))),
			set(_possible_moves, moves),
		] where moves = find_moves(pos, _search_cost)",
		
		_possible_moves: { variable:true, type: "list", dynamic_initialization: true },

		_move_toward_target: "def() ->commands
		[
			if(animation != desired_animation, set(animation, desired_animation))
				where desired_animation = if(translation = _target_translation and _current_movement_path = [], 'stand', 'walk'),
			if(sum(zip(translation, _target_translation, abs(a-b))) > speed*8, set(rotation, [rotation[0], if(abs(rotation[1] - target_rotation) <= 15.0, rotation[1], rotation[1] - sign(angle_delta(target_rotation, rotation[1]))*15.0) where target_rotation = 90 - angle(translation[0], translation[2], _target_translation[0], _target_translation[2]), rotation[2]])),
			debug('MOVE: ' + angle(translation[0], translation[2], _target_translation[0], _target_translation[2]) + ' -> ' + translation + ' vs ' + _target_translation),
			set(translation, map(translation, if(abs(target - value) <= speed, target, value + sign(target - value)*speed) where target = _target_translation[index])),
			//set(translation, _target_translation),
			if(_target_translation = translation,
			   set(_target_translation, null))
		]
			asserting _target_translation != null
			where speed = 0.1
		",

		//Pathfinding function. Takes a source and destination and returns
		//a list of the locations to step through to navigate this path.
		//TODO: Fix this and make it use proper pathfinding!
		_find_movement_path: "def(Vec3 src, Vec3 dst) -> [Vec3]
			if([src[0],src[2]] = [dst[0],dst[2]], [],
			 [target_point] + _find_movement_path(target_point, dst)
			 where target_point =
			   [target_xz[0], if(ht, ht, 0), target_xz[1]]
			 where ht = world.logical.get_height_at_point(target_xz[0],target_xz[1]) 
			 where target_xz =
				if(src[0] < dst[0],
				   [src[0]+1, src[2]],
				   src[0] > dst[0],
				   [src[0]-1, src[2]],
				   src[2] < dst[2],
				   [src[0], src[2]+1],
				   [src[0], src[2]-1]
				  )
			)
		",
	},

	handlers: {
		process: "[
			set(_mytest, _mytest+1),
			//debug(_mytest),
			if(cycle = 10, attach_model(voxel_model('data/voxel_models/sword.cfg'), 'handle', 'melee_weapon')), 
			//if(cycle%100 = 0, set(animation, 'walk')), 
			//if(cycle%250 = 0, set(animation, 'strike')), 
			//if(cycle%1000 = 0, set(animation, 'throw_celebrate')), 
			
			if(_select_box, set(_select_box.color, [32,int(63 * sin(cycle*5)+128),0,255])),
			if(_target_translation = null and _current_movement_path != [],
			[
				set(_target_translation, [
				  pt[0]*world.logical.x_scale+1.5,
				  pt[1]*world.logical.y_scale+3,
				  pt[2]*world.logical.z_scale+1.5,
				])
				  where pt = _current_movement_path[0],
				set(_current_movement_path, _current_movement_path[1:])
			]),

			if(_target_translation != null, _move_toward_target())
		] where wireframe = world.draw_primitive[0]",
		
		"mouse_move*": "if(_select_box,
			if(ht != null, set(_select_box.translation, _pt_to_model([pt[0],ht,pt[2]])), set(_select_box.translation, [-1000,-1000,-1000])))
			where ht = world.logical.get_height_at_point(pt[0],pt[2])
			where pt = world.logical.point_convert(ModelPoint<- arg.world_point) 
			where arg = object <- event_arg",
		
		"mouse_down*": "[
			if(ht != null and pos in _possible_moves, [
				_highlight_moveable_locations(pos),
				debug('MOVE: ' + _find_movement_path(_position, pos)),
				set(_position, pos),
				set(_current_movement_path, _find_movement_path(_position, pos)),
				debug('click: ' + pt),
			]) where pos = if(ht != null,[pt[0],ht+1,pt[2]],[0,0,0])
			   where ht = world.logical.get_height_at_point(pt[0],pt[2]) 
			   where pt = world.logical.point_convert(ModelPoint <- arg.world_point)
			   where arg = object <- event_arg
		]",
		
		"mouse_down": "[
			debug('clicked', me.type),		
		]",
		
		"create_moves": "_highlight_moveable_locations([0,2,0])",
		
		"create": "[
			set(world.draw_primitive, [box]),
			set(_select_box, wireframe_box_primitive<- box),
			
			set(_dg, dg),
			set(_wdg, weighted_graph(dg, _movement_cost_fn(Vec3<- a, Vec3<- b))),
			
			fire_event('create_moves'),
		] where box = draw_primitive({
			type: 'box_wireframe',
			points: [[0,0,0],[3,1,3]],
			color: [32,128,0,255],
			scale: [1.05,1.05,1.05]
		}), dg = world.logical.create_directed_graph()",
	},
}
