{
	shader: "lighted_color_shader",
	model: "humanoid.cfg",

	properties: {
		_mytest: 5,
		mydetails: "def() ->[decimal] [x,y,z]",

		_movement_cost_fn: "def(Vec3 a,Vec3 b) -> decimal|null
			if(abs(a[1]-b[1]) < 2, 1.0, null)
		",		
	
		_dg: { variable: true, type: "directed_graph", dynamic_initialization: true },
		_wdg: { variable: true, type: "weighted_directed_graph", dynamic_initialization: true },
		find_moves: "def(Vec3 pos, decimal moves) -> [Vec3] [Vec3] <- path_cost_search(_wdg, pos, moves)",
		
		// game logic space position.
		_position: { variable:true, type: "Vec3", dynamic_initialization: true },
		
		_select_box: { variable:true, type: "wireframe_box_primitive", dynamic_initialization: true },
		
		_search_cost: "decimal<- 2.5",
		
		_pt_to_logical: "def(ModelPoint pt) -> Vec3 zip(pt,world.logical.scale,int(a/b))",
		_pt_to_model: "def(Vec3 pt) -> ModelPoint zip(pt,world.logical.scale,a*b)",
		
		_highlight_moveable_locations: "def(Vec3 pos) -> commands [
			set(world.draw_primitive, [_select_box] + map(moves, draw_primitive({
				type: 'box',
				translation: _pt_to_model([value[0],value[1]-1,value[2]]),
				points: [[0,0,0],[3,1,3]],
				color: [255,192,0,255],
				scale: [0.9,1.03,0.9]				
			}))),
			set(_possible_moves, moves),
		] where moves = find_moves(pos, _search_cost)",
		
		_possible_moves: { variable:true, type: "list", dynamic_initialization: true },
	},

	handlers: {
		process: "[
			set(_mytest, _mytest+1),
			//debug(_mytest),
			if(cycle = 10, attach_model(voxel_model('data/voxel_models/sword.cfg'), 'handle', 'melee_weapon')), 
			//if(cycle%100 = 0, set(animation, 'walk')), 
			//if(cycle%250 = 0, set(animation, 'strike')), 
			//if(cycle%1000 = 0, set(animation, 'throw_celebrate')), 
			
			if(_select_box, set(_select_box.color, [32,int(63 * sin(cycle*5)+128),0,255])),
		] where wireframe = world.draw_primitive[0]",
		
		"mouse_move*": "if(_select_box,
			if(ht != null, set(_select_box.translation, _pt_to_model([pt[0],ht,pt[2]])), set(_select_box.translation, [-1000,-1000,-1000])))
			where ht = world.logical.get_height_at_point(pt[0],pt[2])
			where pt = world.logical.point_convert(ModelPoint<- arg.world_point) 
			where arg = object <- event_arg",
		
		"mouse_down*": "[
			if(ht != null and pos in _possible_moves, [
				set(animation, 'walk'),
				_highlight_moveable_locations(pos),
				set(_position, pos),
				set(translation, [pt[0]*world.logical.x_scale+1.5, ht*world.logical.y_scale+3, pt[2]*world.logical.z_scale+1.5]),
				schedule(25, set(me.animation, 'stand')),
			]) where pos = if(ht != null,[pt[0],ht+1,pt[2]],[0,0,0])
			   where ht = world.logical.get_height_at_point(pt[0],pt[2]) 
			   where pt = world.logical.point_convert(ModelPoint <- arg.world_point)
			   where arg = object <- event_arg
		]",
		
		"mouse_down": "[
			debug('clicked', me.type),		
		]",
		
		"create_moves": "_highlight_moveable_locations([0,2,0])",
		
		"create": "[
			set(world.draw_primitive, [box]),
			set(_select_box, wireframe_box_primitive<- box),
			
			set(_dg, dg),
			set(_wdg, weighted_graph(dg, _movement_cost_fn(Vec3<- a, Vec3<- b))),
			
			fire_event('create_moves'),
		] where box = draw_primitive({
			type: 'box_wireframe',
			points: [[0,0,0],[3,1,3]],
			color: [32,128,0,255],
			scale: [1.05,1.05,1.05]
		}), dg = world.logical.create_directed_graph()",
	},
}
