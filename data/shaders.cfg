{
	shaders: {
		vertex: {
			test_v: "
			uniform float u_time;
			attribute vec4 a_position;
			attribute vec2 a_texcoord;
			varying vec2 v_texcoord;
			void main() {
				v_texcoord = a_texcoord;
				gl_Position = a_position;
				gl_Position[0] = gl_Position[0];
			}",

			simple_v: "
			uniform mat4 mvp_matrix;
			attribute vec4 a_position;
			void main() {
				gl_Position = mvp_matrix * a_position;
			}
			",
			
			iso_shader_v: "
				uniform mat4 mvp_matrix;
				attribute vec3 a_position;
				attribute vec2 a_tex_coord;
				varying vec2 tex_coord;

				void main()
				{
					gl_Position = mvp_matrix * vec4(a_position, 1.0);
					tex_coord = a_tex_coord;
				}
			",
		},

		fragment: {
			test_f: "
				uniform sampler2D u_tex_map;
				uniform float u_time;
				varying vec2 v_texcoord;
				void main() {
					vec2 v = v_texcoord;
					v[1] = v[1]+sin(v[0]*20.0 + u_time)*0.1;
					vec4 col = texture2D(u_tex_map, v);
					gl_FragColor = col;
				}",	
			
			simple_f: "
				void main() {
					gl_FragColor = vec4(0.0, 0.0, 0.0, 0.25);
				}
			",
			
			iso_shader_f: "
				varying vec2 tex_coord;
				uniform sampler2D u_tex0;

				void main()
				{
					gl_FragColor = texture2D(u_tex0, tex_coord);
				}
			",
		},
	},

	programs: [{
		name: "test",
		vertex: "test_v",
		fragment: "test_f",
		attributes: {
			vertex: "a_position",
			texcoord: "a_texcoord",
		},
	}, {
		name: "mycircle",
		vertex: "simple_v",
		fragment: "simple_f",
		attributes: {
			vertex: "a_position"
		},
		uniforms: {
			mvp_matrix: "mvp_matrix",
		}
	}, {
		name: "iso_shader",
		vertex: "iso_shader_v",
		fragment: "iso_shader_f",		
		attributes: {
			vertex: "a_position"
		},
		uniforms: {
			mvp_matrix: "mvp_matrix",
		}
	}],

	instances: [{
		name: "water_distort",
		new: true,
		vertex: "
		uniform mat4 u_anura_mvp_matrix;
		uniform float u_anura_cycle;
		uniform vec4 u_anura_sprite_area;
		uniform vec4 u_anura_draw_area;
		attribute vec4 a_anura_vertex;
		attribute vec2 a_anura_texcoord;
		varying vec2 v_texcoord;
		varying vec4 v_vertex;
		void main()
		{
			v_vertex = a_anura_vertex;
			gl_Position = u_anura_mvp_matrix * a_anura_vertex;
			v_texcoord = a_anura_texcoord;
		}
		",
		fragment: "
		uniform sampler2D u_anura_tex_map;
		uniform float u_intensity;
		uniform vec4 u_water_area[2];
		uniform float u_anura_cycle;
		uniform vec4 u_anura_draw_area;
		uniform vec4 u_anura_sprite_area;
		varying vec2 v_texcoord;
		varying vec4 v_vertex;
		void main()
		{
			vec2 texcoord = v_texcoord;
			for(int n = 0; n != 2; ++n) {
				if(u_water_area[n][0] >= u_water_area[n][2]) {
					break;
				}

				float left = max(u_anura_draw_area[0], u_water_area[n][0]);
				float top = max(u_anura_draw_area[1], u_water_area[n][1]);
				float right = min(u_anura_draw_area[2], u_water_area[n][2]);
				float bottom = min(u_anura_draw_area[3], u_water_area[n][3]);
				if(v_vertex[0] > left &&
				   v_vertex[1] > top &&
				   v_vertex[0] < right &&
				   v_vertex[1] < bottom) {
		
					float falloff_ratio = min(min(v_vertex[0] - left, right - v_vertex[0])/40.0, 1.0);
					
					texcoord[0] = texcoord[0] + falloff_ratio*sin((u_anura_draw_area[0] + v_vertex[0])*0.02 + u_anura_cycle/20.0)/300.0;
				}
			}
			gl_FragColor = texture2D(u_anura_tex_map, texcoord);
		}
		",

		draw: "[if(water_rects, set(uniform_commands.u_water_area, fold(water_rects[:2], a+b)),
							   set(uniform_commands.u_water_area, [0,0,0,0])),
							   ]

		  where water_rects = (
		
		[ [water.vars.zone_x1 - pos[0], water.vars.zone_y1 - pos[1], water.vars.zone_x2 - pos[0], water.vars.zone_y2 - pos[1]]
		  | water <- level.chars,
			water.type = 'water_controller',
			rects_intersect([water.vars.zone_x1, water.vars.zone_y1, water.vars.zone_x2, water.vars.zone_y2], camera_rect)
		] where camera_rect = [pos[0], pos[1], pos[0]+pos[2], pos[1]+pos[3]]
		  where pos = level.camera_position
		)
		"
	}, {
		name: "iso_line",
		new: true,
		vertex: "
			uniform mat4 mvp_matrix;
			attribute vec3 a_position;
			void main()
			{
				gl_Position = mvp_matrix * vec4(a_position, 1.0);
			}
		",
		fragment: "
			uniform vec4 u_color;
			void main()
			{
				gl_FragColor = u_color;
			}
		",
		attributes: {
			vertex: "a_position"
		},
		uniforms: {
			color: "u_color",
			mvp_matrix: "mvp_matrix",
		}
	}],

}
